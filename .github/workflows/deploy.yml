name: Deploy Infrastructure

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::841162711590:role/task-manager-apigateway-role
          aws-region: eu-west-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      - name: Terraform Init
        run: |
          cd infra
          terraform init

      - name: Import existing resources (ignore errors if they don't exist)
        run: |
          cd infra
          terraform import aws_iam_policy.task_manager_apigateway_policy arn:aws:iam::841162711590:policy/task-manager-apigateway-policy || true
          terraform import aws_iam_role.task_manager_apigateway_role task-manager-apigateway-role || true
          terraform import aws_cloudfront_origin_access_identity.origin_s3 E1J55C9RVYEM3E || true
          terraform import aws_lambda_function.lambda_function_over_https LambdaFunctionOverHttps || true

      - name: Terraform Plan
        run: |
          cd infra
          terraform plan

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        run: |
          cd infra
          terraform apply -auto-approve

      - name: Setup Node.js
        if: github.ref == 'refs/heads/main'
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Build React App
        if: github.ref == 'refs/heads/main'
        run: |
          cd client
          npm install
          npm run build

      - name: Get S3 bucket name from Terraform
        if: github.ref == 'refs/heads/main'
        id: get-bucket
        run: |
          cd infra
          echo "BUCKET_NAME=$(terraform output -raw s3_bucket_name)" >> $GITHUB_OUTPUT

      - name: Deploy to S3
        if: github.ref == 'refs/heads/main'
        run: |
          aws s3 sync client/dist/ s3://${{ steps.get-bucket.outputs.BUCKET_NAME }} --delete

      - name: Get CloudFront distribution ID
        if: github.ref == 'refs/heads/main'
        id: get-cloudfront
        run: |
          cd infra
          echo "DISTRIBUTION_ID=$(terraform output -raw cloudfront_distribution_id)" >> $GITHUB_OUTPUT

      - name: Invalidate CloudFront
        if: github.ref == 'refs/heads/main'
        run: |
          aws cloudfront create-invalidation --distribution-id ${{ steps.get-cloudfront.outputs.DISTRIBUTION_ID }} --paths "/*"