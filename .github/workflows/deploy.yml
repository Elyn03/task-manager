name: Deploy Infrastructure

on:
  push:
    branches: [main]

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    name: Full Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push frontend image
        run: |
          docker build -t task-manager-client ./client
          docker tag task-manager-client lokiice/task-manager:client
          docker push lokiice/task-manager:client

      - name: Build and push backend image
        run: |
          docker build -t task-manager-api ./api
          docker tag task-manager-api lokiice/task-manager:api
          docker push lokiice/task-manager:api

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_IAM_ROLE }}
          aws-region: eu-west-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.5

      - name: Terraform Init
        run: |
          cd infra
          terraform init

      - name: Terraform Apply
        run: |
          cd infra
          terraform apply -auto-approve

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Build React App
        run: |
          cd client
          npm install
          npm run build

      - name: Get S3 bucket name from Terraform
        id: get-bucket
        run: |
          cd infra
          echo "BUCKET_NAME=$(terraform output -raw s3_bucket_name)" >> $GITHUB_OUTPUT

      - name: Deploy to S3
        run: |
          aws s3 sync client/dist/ s3://${{ steps.get-bucket.outputs.BUCKET_NAME }} --delete

      - name: Get CloudFront distribution ID
        id: get-cloudfront
        run: |
          cd infra
          echo "DISTRIBUTION_ID=$(terraform output -raw cloudfront_distribution_id)" >> $GITHUB_OUTPUT

      - name: Invalidate CloudFront cache
        run: |
          aws cloudfront create-invalidation --distribution-id ${{ steps.get-cloudfront.outputs.DISTRIBUTION_ID }} --paths "/*"
